default_task_verify: &default_task
  account: '&ACCOUNT;'
  attrs:
    cycledefs: forecast
    maxtries: '1'
  envars: &default_vars
    GLOBAL_VAR_DEFNS_FP: '&GLOBAL_VAR_DEFNS_FP;'
    USHdir: '&USHdir;'
    PDY: !cycstr '@Y@m@d'
    cyc: !cycstr "@H"
    subcyc: !cycstr "@M"
    LOGDIR: !cycstr "&LOGDIR;"
    nprocs: '{{ parent.nnodes * parent.ppn }}'
    FHR: '{% for h in range(1, workflow.FCST_LEN_HRS+1) %}{{ " %02d" % h  }}{% endfor %}'
    SLASH_ENSMEM_SUBDIR: '&SLASH_ENSMEM_SUBDIR;'
  join: !cycstr '&LOGDIR;/{{ jobname }}_@Y@m@d@H.log'
  memory: '{% if user.MACHINE not in ["WCOSS2", "NOAACLOUD"] %}{{ "2G" }}{% endif %}'
  native: '{{ platform.SCHED_NATIVE_CMD }}'
  nnodes: 1
  nodes: '{{ nnodes }}:ppn={{ ppn }}'
  nodesize: '&NCORES_PER_NODE;'
  partition: '{% if platform.get("PARTITION_DEFAULT") %}&PARTITION_DEFAULT;{% else %}None{% endif %}'
  ppn: 1
  queue: '&QUEUE_DEFAULT;'
  walltime: 00:30:00

task_get_obs_ccpa:
  <<: *default_task
  command: '&LOAD_MODULES_RUN_TASK_FP; "get_obs" "&JOBSDIR;/JREGIONAL_GET_OBS_CCPA"'
  envars:
    <<: *default_vars
    ACCUM: '01'
    OBS_DIR: '&CCPA_OBS_DIR;'
  partition: '{% if platform.get("PARTITION_HPSS") %}&PARTITION_HPSS;{% else %}None{% endif %}'
  queue: "&QUEUE_HPSS;"
  walltime: 00:45:00

task_get_obs_mrms:
  <<: *default_task
  command: '&LOAD_MODULES_RUN_TASK_FP; "get_obs" "&JOBSDIR;/JREGIONAL_GET_OBS_MRMS"'
  envars:
    <<: *default_vars
    OBS_DIR: '&MRMS_OBS_DIR;'
    VAR: 'REFC RETOP'
  partition: '{% if platform.get("PARTITION_HPSS") %}&PARTITION_HPSS;{% else %}None{% endif %}'
  queue: "&QUEUE_HPSS;"
  walltime: 00:45:00

task_get_obs_ndas:
  <<: *default_task
  envars:
    <<: *default_vars
    OBS_DIR: '&NDAS_OBS_DIR;'
  command: '&LOAD_MODULES_RUN_TASK_FP; "get_obs" "&JOBSDIR;/JREGIONAL_GET_OBS_NDAS"'
  queue: "&QUEUE_HPSS;"
  partition: '{% if platform.get("PARTITION_HPSS") %}&PARTITION_HPSS;{% else %}None{% endif %}'
  walltime: 02:00:00

metatask_ens_vx:
  var:
    mem: '{% if global.DO_ENSEMBLE  %}{% for m in range(1, global.NUM_ENS_MEMBERS+1) %}{{ "%03d "%m }}{%- endfor -%} {% else %}{{ "det" }}{% endif %}'
  metatask_gridstatvx:
    var:
      VAR: APCP REFC RETOP
      OBS: ccpa mrms mrms
      OBS_DIR: '&CCPA_OBS_DIR; &MRMS_OBS_DIR; &MRMS_OBS_DIR;'
    task_gridstatvx_#VAR#_#mem#:
      <<: *default_task
      command: '&LOAD_MODULES_RUN_TASK_FP; "run_vx" "&JOBSDIR;/JREGIONAL_RUN_VX_GRIDSTAT"'
      envars:
        <<: *default_vars
        OBS_DIR: '#OBS_DIR#'
        VAR: '#VAR#'
        ACCUM: '01'
      walltime: 02:00:00
      dependency:
        and:
          or_get_obs: # Ensure get_obs task is complete if it's turned on
            not:
              taskvalid:
                attrs:
                  task: get_obs_#OBS#
            and:
              taskvalid:
                attrs:
                  task: get_obs_#OBS#
              taskdep:
                attrs:
                  task: get_obs_#OBS#
          or_do_post: &post_files_exist
            and_run_post: # If post was meant to run, wait on the whole post metatask
              taskvalid:
                attrs:
                  task: run_post_det_f000
              metataskdep:
                attrs:
                  metatask: run_post
            and_inline_post: # If inline post ran, wait on the forecast task to complete
              not:
                taskvalid:
                  attrs:
                    task: run_post_det_f000
              taskdep:
                attrs:
                  task: run_fcst_det
  
  metatask_gridstatvx_acc:
    var:
      ACCUM_HR: '{% for ah in [3, 6, 24] %}{% if workflow.FCST_LEN_HRS >= ah %}{{ "%02d " % ah }}{% endif %}{% endfor %}'
      FCST_HR_LIST: '{% for ah in [3, 6, 24] %}{% if workflow.FCST_LEN_HRS >= ah %}{% for h in range(ah, workflow.FCST_LEN_HRS+1, ah) %}{{ "%02d," % h  }}{% endfor %}{% endif %} {% endfor %}'
    task_gridstatvx_#ACCUM_HR#h_#mem#:
      <<: *default_task
      command: '&LOAD_MODULES_RUN_TASK_FP; "run_vx" "&JOBSDIR;/JREGIONAL_RUN_VX_GRIDSTAT"'
      envars:
        <<: *default_vars
        FHR: '#FCST_HR_LIST#'
        OBS_DIR: '&CCPA_OBS_DIR;'
        VAR: APCP
        ACCUM: '#ACCUM_HR#'
      walltime: 02:00:00
      dependency:
        taskdep:
          attrs:
            task: run_gridstatvx_APCP
  
  
  task_run_pointstatvx_#mem#:
    <<: *default_task
    command: '&LOAD_MODULES_RUN_TASK_FP; "run_vx" "&JOBSDIR;/JREGIONAL_RUN_VX_POINTSTAT"'
    walltime: 01:00:00
    dependency:
      and:
        <<: *post_files_exist
        or_get_obs: # Get obs complete if turned on
          not:
            taskvalid:
              attrs:
                task: get_obs_ndas
          and:
            taskvalid:
              attrs:
                task: get_obs_ndas
            taskdep:
              attrs:
                task: get_obs_ndas
  
