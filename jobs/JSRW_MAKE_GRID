#!/usr/bin/env bash

#
#-----------------------------------------------------------------------
#
# The J-Job that generates input NetCDF grid files for running the
# regional configuration of FV3 
#
#-----------------------------------------------------------------------
#
date
export PS4='+ $SECONDS + '
set -xue
#
#-----------------------------------------------------------------------
#
# Set the NCO standard environment variables (Table 1, pp.4)
#
#-----------------------------------------------------------------------
#
export USHsrw="${HOMEdir}/ush"
export EXECsrw="${HOMEdir}/exec"
export FIXsrw="${HOMEdir}/fix"
export PARMsrw="${HOMEdir}/parm"
export SCRIPTSsrw="${HOMEdir}/scripts"
#
#-----------------------------------------------------------------------
#
# Source the variable definitions file and the bash utility functions.
#
#-----------------------------------------------------------------------
#
. ${PARMsrw}/source_util_funcs.sh
task_global_vars=( "MACHINE" "WORKFLOW_MANAGER" "SCHED" "NET_default" \
  "RUN_default" "GRID_DIR" "PREEXISTING_DIR_METHOD" "DO_ENSEMBLE" "VERBOSE" )
for var in ${task_global_vars[@]}; do
  source_config_for_task ${var} ${GLOBAL_VAR_DEFNS_FP}
done
#
#-----------------------------------------------------------------------
#
# Get the full path to the file in which this script/function is located 
# (scrfunc_fp), the name of that file (scrfunc_fn), and the directory in
# which the file is located (scrfunc_dir).
#
#-----------------------------------------------------------------------
#
scrfunc_fp=$( $READLINK -f "${BASH_SOURCE[0]}" )
scrfunc_fn=$( basename "${scrfunc_fp}" )
scrfunc_dir=$( dirname "${scrfunc_fp}" )
#
#-----------------------------------------------------------------------
#
# Print message indicating entry into script.
#
#-----------------------------------------------------------------------
#
print_info_msg "
========================================================================
Entering script:  \"${scrfunc_fn}\"
In directory:     \"${scrfunc_dir}\"

This is the J-job script for the task that generates grid files.
========================================================================"
#
#-----------------------------------------------------------------------
#
# Define job and jobid by default for rocoto
#
#-----------------------------------------------------------------------
#
WORKFLOW_MANAGER="${WORKFLOW_MANAGER:-rocoto}"
if [ "${WORKFLOW_MANAGER}" = "rocoto" ]; then
  if [ "${SCHED}" = "slurm" ]; then
    job=${SLURM_JOB_NAME}
    pid=${SLURM_JOB_ID}
  elif [ "${SCHED}" = "pbspro" ]; then
    job=${PBS_JOBNAME}
    pid=${PBS_JOBID}
  else
    job="task"
    pid=$$
  fi
  jobid="${job}.${PDY}${cyc}.${pid}"
fi
#
#-----------------------------------------------------------------------
#
# Create a temp working directory (DATA) and cd into it.
#
#-----------------------------------------------------------------------
#
export DATA="${DATA:-${DATAROOT}/${jobid}}"
mkdir -p $DATA
cd $DATA
#
#-----------------------------------------------------------------------
#
# Define NCO environment variables and set COM type definitions.
#
#-----------------------------------------------------------------------
#
export NET="${NET:-${NET_default}}"
export RUN="${RUN:-${RUN_default}}"

[[ "$WORKFLOW_MANAGER" = "rocoto" ]] && export COMROOT=$COMROOT
if [ "${MACHINE}" = "WCOSS2" ]; then
  export COMIN="${COMIN:-$(compath.py -o ${NET}/${model_ver}/${RUN}.${PDY}/${cyc}${SLASH_ENSMEM_SUBDIR})}"
  export COMOUT="${COMOUT:-$(compath.py -o ${NET}/${model_ver}/${RUN}.${PDY}/${cyc}${SLASH_ENSMEM_SUBDIR})}"
else
  export COMIN="${COMIN:-${COMROOT}/${NET}/${model_ver}}"
  export COMOUT="${COMOUT:-${COMROOT}/${NET}/${model_ver}/${RUN}.${PDY}/${cyc}${SLASH_ENSMEM_SUBDIR}}"
fi

mkdir -p ${COMOUT}

# Create a teomporary share directory
export DATA_SHARE="${DATA_SHARE:-${DATAROOT}/DATA_SHARE/${PDY}${cyc}}"
mkdir -p ${DATA_SHARE}

# Run setpdy to initialize PDYm and PDYp variables
export cycle="${cycle:-t${cyc}z}"
setpdy.sh
. ./PDY

# Create GRID_DIR
check_for_preexist_dir_file "${GRID_DIR}" "${PREEXISTING_DIR_METHOD}"
mkdir -p "${GRID_DIR}"
#
#-----------------------------------------------------------------------
#
# Set sub-cycle and ensemble member names in file/diectory names
#
#-----------------------------------------------------------------------
#
if [ ${subcyc} -ne 0 ]; then
  export cycle="t${cyc}${subcyc}z"
fi
if [ $(boolify "${DO_ENSEMBLE}") = "TRUE" ] && [ ! -z ${ENSMEM_INDX} ]; then
  export dot_ensmem=".mem${ENSMEM_INDX}"
else
  export dot_ensmem=
fi
#
#-----------------------------------------------------------------------
#
# Call the ex-script for this J-job.
#
#-----------------------------------------------------------------------
#
export pgmout="${DATA}/OUTPUT.$$"
env

${SCRIPTSsrw}/exsrw_make_grid.sh
export err=$?; err_chk

if [ -e "$pgmout" ]; then
  cat $pgmout
fi
#
#-----------------------------------------------------------------------
#
# Create a flag file to make rocoto aware that the make_grid task has 
# successfully completed (so that other tasks that depend on it can be
# launched).  
#
# Although we can use the <taskdep> tag to make other tasks depend on 
# the successful completion of make_grid, it turns out that the <task-
# dep> tag assumes that the task it specifies (in this case make_grid)
# runs for the same set of cycles as the one in which it appears as a 
# dependency.  Thus, if we use <taskdep> in a cycle-dependent task in 
# the workflow to make it depend on the make_grid, then the workflow 
# will wait for make_grid to run for each cycle for which that cycle-de-
# pendent task is defined before running the task.  But since make_grid
# will not run for each cycle (except possibly for the very first one),
# the cycle-dependent task will not be able to run for any of the cycles
# except the first one.  For this reason, we cannot use the <taskdep> 
# tag to make other cycle-dependent tasks depend on make_grid and must
# instead use a flag file.
#
#-----------------------------------------------------------------------
#
touch "${GRID_DIR}/make_grid_task_complete.txt"
#
#-----------------------------------------------------------------------
#
# Whether or not working directory DATA should be kept.
#
#-----------------------------------------------------------------------
#
if [ "${KEEPDATA}" = "NO" ]; then
  rm -rf ${DATA}
fi
date

